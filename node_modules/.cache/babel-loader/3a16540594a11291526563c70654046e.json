{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Muham\\\\Desktop\\\\search-app\\\\src\\\\components\\\\maps.jsx\";\nimport React from \"react\";\nimport { withGoogleMap, GoogleMap, withScriptjs, InfoWindow, Marker } from \"react-google-maps\";\nimport Autocomplete from \"react-google-autocomplete\";\nimport Geocode from \"react-geocode\";\nGeocode.setApiKey(\"AIzaSyDGe5vjL8wBmilLzoJ0jNIwe9SAuH2xS_0\");\nGeocode.enableDebug();\n\nclass Map extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.getCity = addressArray => {\n      let city = \"\";\n\n      for (let i = 0; i < addressArray.length; i++) {\n        if (addressArray[i].types[0] && \"administrative_area_level_2\" === addressArray[i].types[0]) {\n          city = addressArray[i].long_name;\n          return city;\n        }\n      }\n    };\n\n    this.getArea = addressArray => {\n      let area = \"\";\n\n      for (let i = 0; i < addressArray.length; i++) {\n        if (addressArray[i].types[0]) {\n          for (let j = 0; j < addressArray[i].types.length; j++) {\n            if (\"sublocality_level_1\" === addressArray[i].types[j] || \"locality\" === addressArray[i].types[j]) {\n              area = addressArray[i].long_name;\n              return area;\n            }\n          }\n        }\n      }\n    };\n\n    this.getState = addressArray => {\n      let state = \"\";\n\n      for (let i = 0; i < addressArray.length; i++) {\n        for (let i = 0; i < addressArray.length; i++) {\n          if (addressArray[i].types[0] && \"administrative_area_level_1\" === addressArray[i].types[0]) {\n            state = addressArray[i].long_name;\n            return state;\n          }\n        }\n      }\n    };\n\n    this.onChange = event => {\n      this.setState({\n        [event.target.name]: event.target.value\n      });\n    };\n\n    this.onInfoWindowClose = event => {};\n\n    this.onPlaceSelected = place => {\n      const address = place.formatted_address,\n            addressArray = place.address_components,\n            city = this.getCity(addressArray),\n            area = this.getArea(addressArray),\n            state = this.getState(addressArray),\n            latValue = place.geometry.location.lat(),\n            lngValue = place.geometry.location.lng(); // Set these values in the state.\n\n      this.setState({\n        address: address ? address : \"\",\n        area: area ? area : \"\",\n        city: city ? city : \"\",\n        state: state ? state : \"\",\n        markerPosition: {\n          lat: latValue,\n          lng: lngValue\n        },\n        mapPosition: {\n          lat: latValue,\n          lng: lngValue\n        }\n      });\n    };\n\n    this.onMarkerDragEnd = event => {\n      console.log(\"event\", event);\n      let newLat = event.latLng.lat(),\n          newLng = event.latLng.lng(),\n          addressArray = [];\n      Geocode.fromLatLng(newLat, newLng).then(response => {\n        const address = response.results[0].formatted_address,\n              addressArray = response.results[0].address_components,\n              city = this.getCity(addressArray),\n              area = this.getArea(addressArray),\n              state = this.getState(addressArray);\n        this.setState({\n          address: address ? address : \"\",\n          area: area ? area : \"\",\n          city: city ? city : \"\",\n          state: state ? state : \"\"\n        });\n      }, error => {\n        console.error(error);\n      });\n    };\n\n    this.state = {\n      address: \"\",\n      city: \"\",\n      area: \"\",\n      state: \"\",\n      mapPosition: {\n        lat: this.props.center.lat,\n        lng: this.props.center.lng\n      },\n      markerPosition: {\n        lat: this.props.center.lat,\n        lng: this.props.center.lng\n      }\n    };\n  }\n  /**\r\n   * Get the current address from the default map position and set those values in the state\r\n   */\n\n\n  componentDidMount() {\n    Geocode.fromLatLng(this.state.mapPosition.lat, this.state.mapPosition.lng).then(response => {\n      const address = response.results[0].formatted_address,\n            addressArray = response.results[0].address_components,\n            city = this.getCity(addressArray),\n            area = this.getArea(addressArray),\n            state = this.getState(addressArray);\n      console.log(\"city\", city, area, state);\n      this.setState({\n        address: address ? address : \"\",\n        area: area ? area : \"\",\n        city: city ? city : \"\",\n        state: state ? state : \"\"\n      });\n    }, error => {\n      console.error(error);\n    });\n  }\n  /**\r\n   * Component should only update ( meaning re-render ), when the user selects the address, or drags the pin\r\n   *\r\n   * @param nextProps\r\n   * @param nextState\r\n   * @return {boolean}\r\n   */\n\n\n  shouldComponentUpdate(nextProps, nextState) {\n    if (this.state.markerPosition.lat !== this.props.center.lat || this.state.address !== nextState.address || this.state.city !== nextState.city || this.state.area !== nextState.area || this.state.state !== nextState.state) {\n      return true;\n    } else if (this.props.center.lat === nextProps.center.lat) {\n      return false;\n    }\n  }\n  /**\r\n   * Get the city and set the city input value to the one selected\r\n   *\r\n   * @param addressArray\r\n   * @return {string}\r\n   */\n\n\n  render() {\n    const AsyncMap = withScriptjs(withGoogleMap(props => /*#__PURE__*/React.createElement(GoogleMap, {\n      google: this.props.google,\n      defaultZoom: this.props.zoom,\n      defaultCenter: {\n        lat: this.state.mapPosition.lat,\n        lng: this.state.mapPosition.lng\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Autocomplete, {\n      style: {\n        width: \"100%\",\n        height: \"40px\",\n        paddingLeft: \"16px\",\n        marginTop: \"2px\",\n        marginBottom: \"100px\"\n      },\n      onPlaceSelected: this.onPlaceSelected,\n      types: [\"(regions)\"],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 224,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(Marker, {\n      google: this.props.google,\n      name: \"Dolores park\",\n      draggable: true,\n      onDragEnd: this.onMarkerDragEnd,\n      position: {\n        lat: this.state.markerPosition.lat,\n        lng: this.state.markerPosition.lng\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 236,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(Marker, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 246,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(InfoWindow, {\n      onClose: this.onInfoWindowClose,\n      position: {\n        lat: this.state.markerPosition.lat + 0.0018,\n        lng: this.state.markerPosition.lng\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 248,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 255,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      style: {\n        padding: 0,\n        margin: 0\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 256,\n        columnNumber: 15\n      }\n    }, this.state.address))))));\n    let map;\n\n    if (this.props.center.lat !== undefined) {\n      map = /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 267,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 268,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"form-group\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 269,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"label\", {\n        htmlFor: \"\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 270,\n          columnNumber: 15\n        }\n      }, \"City\"), /*#__PURE__*/React.createElement(\"input\", {\n        type: \"text\",\n        name: \"city\",\n        className: \"form-control\",\n        onChange: this.onChange,\n        readOnly: \"readOnly\",\n        value: this.state.city,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 271,\n          columnNumber: 15\n        }\n      })), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"form-group\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 280,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"label\", {\n        htmlFor: \"\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 281,\n          columnNumber: 15\n        }\n      }, \"Area\"), /*#__PURE__*/React.createElement(\"input\", {\n        type: \"text\",\n        name: \"area\",\n        className: \"form-control\",\n        onChange: this.onChange,\n        readOnly: \"readOnly\",\n        value: this.state.area,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 282,\n          columnNumber: 15\n        }\n      })), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"form-group\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 291,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"label\", {\n        htmlFor: \"\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 292,\n          columnNumber: 15\n        }\n      }, \"State\"), /*#__PURE__*/React.createElement(\"input\", {\n        type: \"text\",\n        name: \"state\",\n        className: \"form-control\",\n        onChange: this.onChange,\n        readOnly: \"readOnly\",\n        value: this.state.state,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 293,\n          columnNumber: 15\n        }\n      })), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"form-group\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 302,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"label\", {\n        htmlFor: \"\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 303,\n          columnNumber: 15\n        }\n      }, \"Address\"), /*#__PURE__*/React.createElement(\"input\", {\n        type: \"text\",\n        name: \"address\",\n        className: \"form-control\",\n        onChange: this.onChange,\n        readOnly: \"readOnly\",\n        value: this.state.address,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 304,\n          columnNumber: 15\n        }\n      }))), /*#__PURE__*/React.createElement(AsyncMap, {\n        googleMapURL: \"https://maps.googleapis.com/maps/api/js?key=AIzaSyDGe5vjL8wBmilLzoJ0jNIwe9SAuH2xS_0&libraries=places\",\n        loadingElement: /*#__PURE__*/React.createElement(\"div\", {\n          style: {\n            height: `100%`\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 316,\n            columnNumber: 29\n          }\n        }),\n        containerElement: /*#__PURE__*/React.createElement(\"div\", {\n          style: {\n            height: this.props.height\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 317,\n            columnNumber: 31\n          }\n        }),\n        mapElement: /*#__PURE__*/React.createElement(\"div\", {\n          style: {\n            height: `100%`\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 318,\n            columnNumber: 25\n          }\n        }),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 314,\n          columnNumber: 11\n        }\n      }));\n    } else {\n      map = /*#__PURE__*/React.createElement(\"div\", {\n        style: {\n          height: this.props.height\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 323,\n          columnNumber: 13\n        }\n      });\n    }\n\n    return map;\n  }\n\n}\n\nexport default Map;","map":{"version":3,"sources":["C:/Users/Muham/Desktop/search-app/src/components/maps.jsx"],"names":["React","withGoogleMap","GoogleMap","withScriptjs","InfoWindow","Marker","Autocomplete","Geocode","setApiKey","enableDebug","Map","Component","constructor","props","getCity","addressArray","city","i","length","types","long_name","getArea","area","j","getState","state","onChange","event","setState","target","name","value","onInfoWindowClose","onPlaceSelected","place","address","formatted_address","address_components","latValue","geometry","location","lat","lngValue","lng","markerPosition","mapPosition","onMarkerDragEnd","console","log","newLat","latLng","newLng","fromLatLng","then","response","results","error","center","componentDidMount","shouldComponentUpdate","nextProps","nextState","render","AsyncMap","google","zoom","width","height","paddingLeft","marginTop","marginBottom","padding","margin","map","undefined"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport {\r\n  withGoogleMap,\r\n  GoogleMap,\r\n  withScriptjs,\r\n  InfoWindow,\r\n  Marker,\r\n} from \"react-google-maps\";\r\nimport Autocomplete from \"react-google-autocomplete\";\r\nimport Geocode from \"react-geocode\";\r\nGeocode.setApiKey(\"AIzaSyDGe5vjL8wBmilLzoJ0jNIwe9SAuH2xS_0\");\r\nGeocode.enableDebug();\r\nclass Map extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      address: \"\",\r\n      city: \"\",\r\n      area: \"\",\r\n      state: \"\",\r\n      mapPosition: {\r\n        lat: this.props.center.lat,\r\n        lng: this.props.center.lng,\r\n      },\r\n      markerPosition: {\r\n        lat: this.props.center.lat,\r\n        lng: this.props.center.lng,\r\n      },\r\n    };\r\n  }\r\n  /**\r\n   * Get the current address from the default map position and set those values in the state\r\n   */\r\n  componentDidMount() {\r\n    Geocode.fromLatLng(\r\n      this.state.mapPosition.lat,\r\n      this.state.mapPosition.lng\r\n    ).then(\r\n      (response) => {\r\n        const address = response.results[0].formatted_address,\r\n          addressArray = response.results[0].address_components,\r\n          city = this.getCity(addressArray),\r\n          area = this.getArea(addressArray),\r\n          state = this.getState(addressArray);\r\n\r\n        console.log(\"city\", city, area, state);\r\n\r\n        this.setState({\r\n          address: address ? address : \"\",\r\n          area: area ? area : \"\",\r\n          city: city ? city : \"\",\r\n          state: state ? state : \"\",\r\n        });\r\n      },\r\n      (error) => {\r\n        console.error(error);\r\n      }\r\n    );\r\n  }\r\n  /**\r\n   * Component should only update ( meaning re-render ), when the user selects the address, or drags the pin\r\n   *\r\n   * @param nextProps\r\n   * @param nextState\r\n   * @return {boolean}\r\n   */\r\n  shouldComponentUpdate(nextProps, nextState) {\r\n    if (\r\n      this.state.markerPosition.lat !== this.props.center.lat ||\r\n      this.state.address !== nextState.address ||\r\n      this.state.city !== nextState.city ||\r\n      this.state.area !== nextState.area ||\r\n      this.state.state !== nextState.state\r\n    ) {\r\n      return true;\r\n    } else if (this.props.center.lat === nextProps.center.lat) {\r\n      return false;\r\n    }\r\n  }\r\n  /**\r\n   * Get the city and set the city input value to the one selected\r\n   *\r\n   * @param addressArray\r\n   * @return {string}\r\n   */\r\n  getCity = (addressArray) => {\r\n    let city = \"\";\r\n    for (let i = 0; i < addressArray.length; i++) {\r\n      if (\r\n        addressArray[i].types[0] &&\r\n        \"administrative_area_level_2\" === addressArray[i].types[0]\r\n      ) {\r\n        city = addressArray[i].long_name;\r\n        return city;\r\n      }\r\n    }\r\n  };\r\n  /**\r\n   * Get the area and set the area input value to the one selected\r\n   *\r\n   * @param addressArray\r\n   * @return {string}\r\n   */\r\n  getArea = (addressArray) => {\r\n    let area = \"\";\r\n    for (let i = 0; i < addressArray.length; i++) {\r\n      if (addressArray[i].types[0]) {\r\n        for (let j = 0; j < addressArray[i].types.length; j++) {\r\n          if (\r\n            \"sublocality_level_1\" === addressArray[i].types[j] ||\r\n            \"locality\" === addressArray[i].types[j]\r\n          ) {\r\n            area = addressArray[i].long_name;\r\n            return area;\r\n          }\r\n        }\r\n      }\r\n    }\r\n  };\r\n  /**\r\n   * Get the address and set the address input value to the one selected\r\n   *\r\n   * @param addressArray\r\n   * @return {string}\r\n   */\r\n  getState = (addressArray) => {\r\n    let state = \"\";\r\n    for (let i = 0; i < addressArray.length; i++) {\r\n      for (let i = 0; i < addressArray.length; i++) {\r\n        if (\r\n          addressArray[i].types[0] &&\r\n          \"administrative_area_level_1\" === addressArray[i].types[0]\r\n        ) {\r\n          state = addressArray[i].long_name;\r\n          return state;\r\n        }\r\n      }\r\n    }\r\n  };\r\n  /**\r\n   * And function for city,state and address input\r\n   * @param event\r\n   */\r\n  onChange = (event) => {\r\n    this.setState({ [event.target.name]: event.target.value });\r\n  };\r\n  /**\r\n   * This Event triggers when the marker window is closed\r\n   *\r\n   * @param event\r\n   */\r\n  onInfoWindowClose = (event) => {};\r\n  /**\r\n   * When the user types an address in the search box\r\n   * @param place\r\n   */\r\n  onPlaceSelected = (place) => {\r\n    const address = place.formatted_address,\r\n      addressArray = place.address_components,\r\n      city = this.getCity(addressArray),\r\n      area = this.getArea(addressArray),\r\n      state = this.getState(addressArray),\r\n      latValue = place.geometry.location.lat(),\r\n      lngValue = place.geometry.location.lng();\r\n    // Set these values in the state.\r\n    this.setState({\r\n      address: address ? address : \"\",\r\n      area: area ? area : \"\",\r\n      city: city ? city : \"\",\r\n      state: state ? state : \"\",\r\n      markerPosition: {\r\n        lat: latValue,\r\n        lng: lngValue,\r\n      },\r\n      mapPosition: {\r\n        lat: latValue,\r\n        lng: lngValue,\r\n      },\r\n    });\r\n  };\r\n  /**\r\n   * When the marker is dragged you get the lat and long using the functions available from event object.\r\n   * Use geocode to get the address, city, area and state from the lat and lng positions.\r\n   * And then set those values in the state.\r\n   *\r\n   * @param event\r\n   */\r\n  onMarkerDragEnd = (event) => {\r\n    console.log(\"event\", event);\r\n    let newLat = event.latLng.lat(),\r\n      newLng = event.latLng.lng(),\r\n      addressArray = [];\r\n    Geocode.fromLatLng(newLat, newLng).then(\r\n      (response) => {\r\n        const address = response.results[0].formatted_address,\r\n          addressArray = response.results[0].address_components,\r\n          city = this.getCity(addressArray),\r\n          area = this.getArea(addressArray),\r\n          state = this.getState(addressArray);\r\n        this.setState({\r\n          address: address ? address : \"\",\r\n          area: area ? area : \"\",\r\n          city: city ? city : \"\",\r\n          state: state ? state : \"\",\r\n        });\r\n      },\r\n      (error) => {\r\n        console.error(error);\r\n      }\r\n    );\r\n  };\r\n  render() {\r\n    const AsyncMap = withScriptjs(\r\n      withGoogleMap((props) => (\r\n        <GoogleMap\r\n          google={this.props.google}\r\n          defaultZoom={this.props.zoom}\r\n          defaultCenter={{\r\n            lat: this.state.mapPosition.lat,\r\n            lng: this.state.mapPosition.lng,\r\n          }}\r\n        >\r\n          {/* For Auto complete Search Box */}\r\n          <Autocomplete\r\n            style={{\r\n              width: \"100%\",\r\n              height: \"40px\",\r\n              paddingLeft: \"16px\",\r\n              marginTop: \"2px\",\r\n              marginBottom: \"100px\",\r\n            }}\r\n            onPlaceSelected={this.onPlaceSelected}\r\n            types={[\"(regions)\"]}\r\n          />\r\n          {/*Marker*/}\r\n          <Marker\r\n            google={this.props.google}\r\n            name={\"Dolores park\"}\r\n            draggable={true}\r\n            onDragEnd={this.onMarkerDragEnd}\r\n            position={{\r\n              lat: this.state.markerPosition.lat,\r\n              lng: this.state.markerPosition.lng,\r\n            }}\r\n          />\r\n          <Marker />\r\n          {/* InfoWindow on top of marker */}\r\n          <InfoWindow\r\n            onClose={this.onInfoWindowClose}\r\n            position={{\r\n              lat: this.state.markerPosition.lat + 0.0018,\r\n              lng: this.state.markerPosition.lng,\r\n            }}\r\n          >\r\n            <div>\r\n              <span style={{ padding: 0, margin: 0 }}>\r\n                {this.state.address}\r\n              </span>\r\n            </div>\r\n          </InfoWindow>\r\n        </GoogleMap>\r\n      ))\r\n    );\r\n    let map;\r\n    if (this.props.center.lat !== undefined) {\r\n      map = (\r\n        <div>\r\n          <div>\r\n            <div className=\"form-group\">\r\n              <label htmlFor=\"\">City</label>\r\n              <input\r\n                type=\"text\"\r\n                name=\"city\"\r\n                className=\"form-control\"\r\n                onChange={this.onChange}\r\n                readOnly=\"readOnly\"\r\n                value={this.state.city}\r\n              />\r\n            </div>\r\n            <div className=\"form-group\">\r\n              <label htmlFor=\"\">Area</label>\r\n              <input\r\n                type=\"text\"\r\n                name=\"area\"\r\n                className=\"form-control\"\r\n                onChange={this.onChange}\r\n                readOnly=\"readOnly\"\r\n                value={this.state.area}\r\n              />\r\n            </div>\r\n            <div className=\"form-group\">\r\n              <label htmlFor=\"\">State</label>\r\n              <input\r\n                type=\"text\"\r\n                name=\"state\"\r\n                className=\"form-control\"\r\n                onChange={this.onChange}\r\n                readOnly=\"readOnly\"\r\n                value={this.state.state}\r\n              />\r\n            </div>\r\n            <div className=\"form-group\">\r\n              <label htmlFor=\"\">Address</label>\r\n              <input\r\n                type=\"text\"\r\n                name=\"address\"\r\n                className=\"form-control\"\r\n                onChange={this.onChange}\r\n                readOnly=\"readOnly\"\r\n                value={this.state.address}\r\n              />\r\n            </div>\r\n          </div>\r\n          <AsyncMap\r\n            googleMapURL=\"https://maps.googleapis.com/maps/api/js?key=AIzaSyDGe5vjL8wBmilLzoJ0jNIwe9SAuH2xS_0&libraries=places\"\r\n            loadingElement={<div style={{ height: `100%` }} />}\r\n            containerElement={<div style={{ height: this.props.height }} />}\r\n            mapElement={<div style={{ height: `100%` }} />}\r\n          />\r\n        </div>\r\n      );\r\n    } else {\r\n      map = <div style={{ height: this.props.height }} />;\r\n    }\r\n    return map;\r\n  }\r\n}\r\nexport default Map;\r\n"]},"metadata":{},"sourceType":"module"}