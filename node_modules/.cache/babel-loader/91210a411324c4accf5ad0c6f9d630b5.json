{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Muham\\\\Desktop\\\\search-app\\\\src\\\\components\\\\maps.jsx\";\nimport React, { Component } from \"react\";\nimport { Map, GoogleApiWrapper, Marker, Circle } from \"google-maps-react\";\nimport Geocode from \"react-geocode\";\nGeocode.setApiKey(\"AIzaSyDADM9II6LJh8_dsIM21Jb0_9tpAiFTBDQ\");\nGeocode.enableDebug();\nconst mapStyles = {\n  width: \"50%\",\n  height: \"50%\"\n};\n\nclass MapComponent extends Component {\n  constructor(props) {\n    super(props);\n\n    this.displayMarkers = loc => {\n      console.log(\"in function\");\n    };\n\n    this.state = {\n      latitude: 33.6163404,\n      longitude: 72.937198\n    };\n  }\n\n  componentDidMount() {\n    let self = this;\n    navigator.geolocation.getCurrentPosition(function (position) {\n      console.log(\"Latitude is :\", position.coords.latitude);\n      console.log(\"Longitude is :\", position.coords.longitude);\n      self.setState({\n        longitude: position.coords.longitude,\n        latitude: position.coords.latitude\n      });\n    }, function (error) {\n      console.error(\"Error Code = \" + error.code + \" - \" + error.message);\n    });\n  } // getGeoLocation() {\n  //   console.log(\"mount\");\n  //   console.log(\"from props longitude\", this.props.longitude);\n  //   console.log(\"from props latitude\", this.props.latitude);\n  //   Geocode.fromAddress(this.props.name).then(\n  //     (response) => {\n  //       const { lat, lng } = response.results[0].geometry.location;\n  //       this.setState({ latitude: lat, longitude: lng });\n  //       console.log(lat, lng);\n  //     },\n  //     (error) => {\n  //       console.error(error);\n  //     }\n  //   );\n  // }\n\n\n  render() {\n    return /*#__PURE__*/React.createElement(Map, {\n      google: this.props.google,\n      zoom: 10,\n      style: mapStyles,\n      center: {\n        lat: this.state.latitude,\n        lng: this.state.longitude\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Marker, {\n      position: {\n        lat: this.state.latitude,\n        lng: this.state.longitude\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(Circle, {\n      radius: 5000,\n      center: {\n        lat: this.state.latitude,\n        lng: this.state.longitude\n      },\n      onMouseover: () => console.log(\"mouseover\"),\n      onClick: () => console.log(\"click\"),\n      onMouseout: () => console.log(\"mouseout\"),\n      strokeColor: \"#FF0000\",\n      strokeOpacity: 1,\n      strokeWeight: 1,\n      fillColor: \"#FF0000\",\n      fillOpacity: 0.2,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }\n    }));\n  }\n\n}\n\nexport default GoogleApiWrapper({\n  apiKey: \"AIzaSyDADM9II6LJh8_dsIM21Jb0_9tpAiFTBDQ\"\n})(MapComponent);","map":{"version":3,"sources":["C:/Users/Muham/Desktop/search-app/src/components/maps.jsx"],"names":["React","Component","Map","GoogleApiWrapper","Marker","Circle","Geocode","setApiKey","enableDebug","mapStyles","width","height","MapComponent","constructor","props","displayMarkers","loc","console","log","state","latitude","longitude","componentDidMount","self","navigator","geolocation","getCurrentPosition","position","coords","setState","error","code","message","render","google","lat","lng","apiKey"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport { Map, GoogleApiWrapper, Marker, Circle } from \"google-maps-react\";\r\nimport Geocode from \"react-geocode\";\r\nGeocode.setApiKey(\"AIzaSyDADM9II6LJh8_dsIM21Jb0_9tpAiFTBDQ\");\r\nGeocode.enableDebug();\r\nconst mapStyles = {\r\n  width: \"50%\",\r\n  height: \"50%\",\r\n};\r\n\r\nclass MapComponent extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      latitude: 33.6163404,\r\n      longitude: 72.937198,\r\n    };\r\n  }\r\n  componentDidMount() {\r\n    let self = this;\r\n    navigator.geolocation.getCurrentPosition(\r\n      function (position) {\r\n        console.log(\"Latitude is :\", position.coords.latitude);\r\n        console.log(\"Longitude is :\", position.coords.longitude);\r\n        self.setState({\r\n          longitude: position.coords.longitude,\r\n          latitude: position.coords.latitude,\r\n        });\r\n      },\r\n      function (error) {\r\n        console.error(\"Error Code = \" + error.code + \" - \" + error.message);\r\n      }\r\n    );\r\n  }\r\n  // getGeoLocation() {\r\n  //   console.log(\"mount\");\r\n  //   console.log(\"from props longitude\", this.props.longitude);\r\n  //   console.log(\"from props latitude\", this.props.latitude);\r\n  //   Geocode.fromAddress(this.props.name).then(\r\n  //     (response) => {\r\n  //       const { lat, lng } = response.results[0].geometry.location;\r\n  //       this.setState({ latitude: lat, longitude: lng });\r\n  //       console.log(lat, lng);\r\n  //     },\r\n  //     (error) => {\r\n  //       console.error(error);\r\n  //     }\r\n  //   );\r\n  // }\r\n  displayMarkers = (loc) => {\r\n    console.log(\"in function\");\r\n  };\r\n  render() {\r\n    return (\r\n      <Map\r\n        google={this.props.google}\r\n        zoom={10}\r\n        style={mapStyles}\r\n        center={{ lat: this.state.latitude, lng: this.state.longitude }}\r\n      >\r\n        <Marker\r\n          position={{ lat: this.state.latitude, lng: this.state.longitude }}\r\n        />\r\n        <Circle\r\n          radius={5000}\r\n          center={{ lat: this.state.latitude, lng: this.state.longitude }}\r\n          onMouseover={() => console.log(\"mouseover\")}\r\n          onClick={() => console.log(\"click\")}\r\n          onMouseout={() => console.log(\"mouseout\")}\r\n          strokeColor=\"#FF0000\"\r\n          strokeOpacity={1}\r\n          strokeWeight={1}\r\n          fillColor=\"#FF0000\"\r\n          fillOpacity={0.2}\r\n        />\r\n      </Map>\r\n    );\r\n  }\r\n}\r\nexport default GoogleApiWrapper({\r\n  apiKey: \"AIzaSyDADM9II6LJh8_dsIM21Jb0_9tpAiFTBDQ\",\r\n})(MapComponent);\r\n"]},"metadata":{},"sourceType":"module"}