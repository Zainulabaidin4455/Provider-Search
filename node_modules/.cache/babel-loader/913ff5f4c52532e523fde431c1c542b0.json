{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Muham\\\\Desktop\\\\search-app\\\\src\\\\components\\\\maps.jsx\";\nimport React, { Component } from \"react\";\nimport { Map, GoogleApiWrapper, Marker, Circle } from \"google-maps-react\";\nimport Geocode from \"react-geocode\";\nGeocode.setApiKey(\"AIzaSyDADM9II6LJh8_dsIM21Jb0_9tpAiFTBDQ\");\nGeocode.enableDebug();\nconst mapStyles = {\n  width: \"50%\",\n  height: \"50%\"\n};\n\nclass MapComponent extends Component {\n  constructor(props) {\n    super(props);\n\n    this.displayMarkers = () => {\n      return this.state.markersLocation.map((loc, index) => {\n        return /*#__PURE__*/React.createElement(Marker, {\n          key: index,\n          id: index,\n          position: {\n            lat: loc.latitude,\n            lng: loc.longitude\n          },\n          onClick: () => console.log(\"You clicked me!\"),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 67,\n            columnNumber: 9\n          }\n        });\n      });\n    };\n\n    this.state = {\n      latitude: 33.6163404,\n      longitude: 72.937198,\n      markersLocation: []\n    };\n  }\n\n  componentDidMount() {\n    let self = this;\n    navigator.geolocation.getCurrentPosition(function (position) {\n      console.log(\"Latitude is :\", position.coords.latitude);\n      console.log(\"Longitude is :\", position.coords.longitude);\n      self.setState({\n        longitude: position.coords.longitude,\n        latitude: position.coords.latitude\n      });\n    }, function (error) {\n      console.error(\"Error Code = \" + error.code + \" - \" + error.message);\n    });\n    this.getGeoLocation([\"Quaid-Azam international Hospital \", \"Military Hospital\", \"CMH rwp\"]);\n    console.log(\"markers Location\", this.state.markersLocation);\n  }\n\n  getGeoLocation(Address_names) {\n    let temp = this.state.markersLocation;\n    console.log(\"in geo getGeoLocation, names = \", Address_names);\n    var name;\n\n    for (name of Address_names) {\n      console.log(\"Name is \", name);\n      Geocode.fromAddress(name).then(response => {\n        const {\n          lat,\n          lng\n        } = response.results[0].geometry.location;\n        temp.push({\n          latitude: lat,\n          longitude: lng\n        });\n        console.log(lat, lng);\n      }, error => {\n        console.error(error);\n      });\n      this.setState({\n        markersLocation: temp\n      });\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Map, {\n      google: this.props.google,\n      zoom: 11,\n      style: mapStyles,\n      center: {\n        lat: this.state.latitude,\n        lng: this.state.longitude\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Marker, {\n      position: {\n        lat: this.state.latitude,\n        lng: this.state.longitude\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(Circle, {\n      radius: 5000,\n      center: {\n        lat: this.state.latitude,\n        lng: this.state.longitude\n      },\n      onMouseover: () => console.log(\"mouseover\"),\n      onClick: () => console.log(\"click\"),\n      onMouseout: () => console.log(\"mouseout\"),\n      strokeColor: \"#FF0000\",\n      strokeOpacity: 1,\n      strokeWeight: 1,\n      fillColor: \"#FF0000\",\n      fillOpacity: 0.2,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 11\n      }\n    }), this.displayMarkers()));\n  }\n\n}\n\nexport default GoogleApiWrapper({\n  apiKey: \"AIzaSyDADM9II6LJh8_dsIM21Jb0_9tpAiFTBDQ\"\n})(MapComponent);","map":{"version":3,"sources":["C:/Users/Muham/Desktop/search-app/src/components/maps.jsx"],"names":["React","Component","Map","GoogleApiWrapper","Marker","Circle","Geocode","setApiKey","enableDebug","mapStyles","width","height","MapComponent","constructor","props","displayMarkers","state","markersLocation","map","loc","index","lat","latitude","lng","longitude","console","log","componentDidMount","self","navigator","geolocation","getCurrentPosition","position","coords","setState","error","code","message","getGeoLocation","Address_names","temp","name","fromAddress","then","response","results","geometry","location","push","render","google","apiKey"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport { Map, GoogleApiWrapper, Marker, Circle } from \"google-maps-react\";\r\nimport Geocode from \"react-geocode\";\r\nGeocode.setApiKey(\"AIzaSyDADM9II6LJh8_dsIM21Jb0_9tpAiFTBDQ\");\r\nGeocode.enableDebug();\r\nconst mapStyles = {\r\n  width: \"50%\",\r\n  height: \"50%\",\r\n};\r\n\r\nclass MapComponent extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      latitude: 33.6163404,\r\n      longitude: 72.937198,\r\n      markersLocation: [],\r\n    };\r\n  }\r\n  componentDidMount() {\r\n    let self = this;\r\n    navigator.geolocation.getCurrentPosition(\r\n      function (position) {\r\n        console.log(\"Latitude is :\", position.coords.latitude);\r\n        console.log(\"Longitude is :\", position.coords.longitude);\r\n        self.setState({\r\n          longitude: position.coords.longitude,\r\n          latitude: position.coords.latitude,\r\n        });\r\n      },\r\n      function (error) {\r\n        console.error(\"Error Code = \" + error.code + \" - \" + error.message);\r\n      }\r\n    );\r\n\r\n    this.getGeoLocation([\r\n      \"Quaid-Azam international Hospital \",\r\n      \"Military Hospital\",\r\n      \"CMH rwp\",\r\n    ]);\r\n    console.log(\"markers Location\", this.state.markersLocation);\r\n  }\r\n  getGeoLocation(Address_names) {\r\n    let temp = this.state.markersLocation;\r\n    console.log(\"in geo getGeoLocation, names = \", Address_names);\r\n    var name;\r\n    for (name of Address_names) {\r\n      console.log(\"Name is \", name);\r\n      Geocode.fromAddress(name).then(\r\n        (response) => {\r\n          const { lat, lng } = response.results[0].geometry.location;\r\n          temp.push({ latitude: lat, longitude: lng });\r\n          console.log(lat, lng);\r\n        },\r\n        (error) => {\r\n          console.error(error);\r\n        }\r\n      );\r\n\r\n      this.setState({ markersLocation: temp });\r\n    }\r\n  }\r\n  displayMarkers = () => {\r\n    return this.state.markersLocation.map((loc, index) => {\r\n      return (\r\n        <Marker\r\n          key={index}\r\n          id={index}\r\n          position={{\r\n            lat: loc.latitude,\r\n            lng: loc.longitude,\r\n          }}\r\n          onClick={() => console.log(\"You clicked me!\")}\r\n        />\r\n      );\r\n    });\r\n  };\r\n  render() {\r\n    return (\r\n      <>\r\n        <Map\r\n          google={this.props.google}\r\n          zoom={11}\r\n          style={mapStyles}\r\n          center={{ lat: this.state.latitude, lng: this.state.longitude }}\r\n        >\r\n          <Marker\r\n            position={{ lat: this.state.latitude, lng: this.state.longitude }}\r\n          />\r\n          <Circle\r\n            radius={5000}\r\n            center={{ lat: this.state.latitude, lng: this.state.longitude }}\r\n            onMouseover={() => console.log(\"mouseover\")}\r\n            onClick={() => console.log(\"click\")}\r\n            onMouseout={() => console.log(\"mouseout\")}\r\n            strokeColor=\"#FF0000\"\r\n            strokeOpacity={1}\r\n            strokeWeight={1}\r\n            fillColor=\"#FF0000\"\r\n            fillOpacity={0.2}\r\n          />\r\n          {this.displayMarkers()}\r\n        </Map>\r\n      </>\r\n    );\r\n  }\r\n}\r\nexport default GoogleApiWrapper({\r\n  apiKey: \"AIzaSyDADM9II6LJh8_dsIM21Jb0_9tpAiFTBDQ\",\r\n})(MapComponent);\r\n"]},"metadata":{},"sourceType":"module"}